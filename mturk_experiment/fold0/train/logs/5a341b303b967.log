No handlers could be found for logger "gensim.models.doc2vec"
main: loading grounder from file...
main: ... done
main: instantiating IO...
main: ... done
main: instantiating Agent...
main: ... done
main: running command dialog...
say_to_user_with_referents: What should I do? {}
get_from_user requested feedback
get_from_user (raw): 'Travel to office next  conference room.'
get_from_user (processed): 'travel to office next conference room'
parse_and_ground_utterance: parsed 'travel to office next conference room' to and(a_l(lambda 1:l.(and(office(1),conference(1)))),a_l(lambda 1:l.(and(office(1),conference(1)))))
parse_and_ground_utterance: resulting groundings with normalized confidences: 
	
say_to_user_with_referents: You want me to deliver something for someone? {'action': 'bring'}
get_from_user requested feedback
get_from_user (raw): 'No'
get_from_user (processed): 'no'
parse_and_ground_utterance: parsed 'no' to no
parse_and_ground_utterance: resulting groundings with normalized confidences: 
	no 1.0
say_to_user_with_referents: You want me to move an item from somewhere to somewhere (not give it to someone)? {'action': 'move'}
get_from_user requested feedback
get_from_user (raw): 'No'
get_from_user (processed): 'no'
parse_and_ground_utterance: parsed 'no' to no
parse_and_ground_utterance: resulting groundings with normalized confidences: 
	no 1.0
say_to_user_with_referents: You want me to go somewhere? (not manipulate any objects) {'action': 'walk'}
get_from_user requested feedback
get_from_user (raw): 'Yes'
get_from_user (processed): 'yes'
parse_and_ground_utterance: parsed 'yes' to yes
parse_and_ground_utterance: resulting groundings with normalized confidences: 
	yes 1.0
say_to_user_with_referents: Where should I go? {'action': 'walk'}
get_from_user requested feedback
get_from_user (raw): 'Office next to conference room'
get_from_user (processed): 'office next to conference room'
parse_and_ground_utterance: parsed 'office next to conference room' to lambda 1:l.(and(adjacent(1,a_l(lambda 2:l.(conference(2)))),office(1)))
parse_and_ground_utterance: resulting groundings with normalized confidences: 
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	True 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
say_to_user: I'm still learning the meanings of some words. I'm going to ask you a few questions about these nearby objects before we continue.
say_to_user_with_referents: Among these nearby objects, could you show me one you would use the word 'pringles' when describing, or shake your head if there are none? {}
get_oidx_from_user requested feedback
get_oidx_from_user: 2
parse_and_ground_utterance: parsed 'office next to conference room' to lambda 1:l.(and(adjacent(1,a_l(lambda 2:l.(conference(2)))),office(1)))
parse_and_ground_utterance: resulting groundings with normalized confidences: 
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	True 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
say_to_user_with_referents: Among these nearby objects, could you show me one you would use the word 'metallic' when describing, or shake your head if there are none? {}
get_oidx_from_user requested feedback
get_oidx_from_user: None
parse_and_ground_utterance: parsed 'office next to conference room' to lambda 1:l.(and(adjacent(1,a_l(lambda 2:l.(conference(2)))),office(1)))
parse_and_ground_utterance: resulting groundings with normalized confidences: 
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	True 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
say_to_user_with_referents: Among these nearby objects, could you show me one you would use the word 'blue' when describing, or shake your head if there are none? {}
get_oidx_from_user requested feedback
get_oidx_from_user: 18
parse_and_ground_utterance: parsed 'office next to conference room' to lambda 1:l.(and(adjacent(1,a_l(lambda 2:l.(conference(2)))),office(1)))
parse_and_ground_utterance: resulting groundings with normalized confidences: 
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	True 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
say_to_user_with_referents: Among these nearby objects, could you show me one you would use the word 'long' when describing, or shake your head if there are none? {}
get_oidx_from_user requested feedback
get_oidx_from_user: 20
parse_and_ground_utterance: parsed 'office next to conference room' to lambda 1:l.(and(adjacent(1,a_l(lambda 2:l.(conference(2)))),office(1)))
parse_and_ground_utterance: resulting groundings with normalized confidences: 
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	True 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
say_to_user_with_referents: Among these nearby objects, could you show me one you would use the word 'styrofoam' when describing, or shake your head if there are none? {}
get_oidx_from_user requested feedback
get_oidx_from_user: 20
parse_and_ground_utterance: parsed 'office next to conference room' to lambda 1:l.(and(adjacent(1,a_l(lambda 2:l.(conference(2)))),office(1)))
parse_and_ground_utterance: resulting groundings with normalized confidences: 
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	True 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
	False 0.0384615384615
say_to_user: Thanks. Now, back to business.
say_to_user: Sorry, I didn't understand that.
say_to_user_with_referents: Where should I go? {'action': 'walk'}
get_from_user requested feedback
get_from_user (raw): 'The office marked with the red X'
get_from_user (processed): 'the office marked with the red x'
say_to_user: I haven't heard the word 'red' before. Does it refer to properties of things, like a color, shape, or weight?
get_from_user requested feedback
get_from_user (raw): 'yes'
get_from_user (processed): 'yes'
parse_and_ground_utterance: parsed 'yes' to yes
parse_and_ground_utterance: resulting groundings with normalized confidences: 
	yes 1.0
say_to_user: Does 'red' mean the same thing as 'white'?
get_from_user requested feedback
get_from_user (raw): 'no'
get_from_user (processed): 'no'
parse_and_ground_utterance: parsed 'no' to no
parse_and_ground_utterance: resulting groundings with normalized confidences: 
	no 1.0
say_to_user: Does 'red' mean the same thing as 'yellow'?
get_from_user requested feedback
get_from_user (raw): 'No'
get_from_user (processed): 'no'
parse_and_ground_utterance: parsed 'no' to no
parse_and_ground_utterance: resulting groundings with normalized confidences: 
	no 1.0
say_to_user: Does 'red' mean the same thing as 'blue'?
get_from_user requested feedback
get_from_user (raw): 'no'
get_from_user (processed): 'no'
parse_and_ground_utterance: parsed 'no' to no
parse_and_ground_utterance: resulting groundings with normalized confidences: 
	no 1.0
say_to_user: I haven't heard the word 'x' before. Does it refer to properties of things, like a color, shape, or weight?
get_from_user requested feedback
get_from_user (raw): 'no'
get_from_user (processed): 'no'
parse_and_ground_utterance: parsed 'no' to no
parse_and_ground_utterance: resulting groundings with normalized confidences: 
	no 1.0
parse_and_ground_utterance: could not generate a parse for the utterance
say_to_user: Sorry, I didn't understand that.
say_to_user_with_referents: Where should I go? {'action': 'walk'}
get_from_user requested feedback
get_from_user (raw): 'to the office next to the conference room'
get_from_user (processed): 'to the office next to the conference room'
parse_and_ground_utterance: parsed 'to the office next to the conference room' to a_l(lambda 1:l.(and(adjacent(1,a_l(lambda 2:l.(conference(2)))),office(1))))
parse_and_ground_utterance: resulting groundings with normalized confidences: 
	3418 1.0
say_to_user_with_referents: You want me to go to <g>here</g> (not manipulate any objects)? {'action': 'walk', 'goal': '3418'}
get_from_user requested feedback
get_from_user (raw): 'yes'
get_from_user (processed): 'yes'
parse_and_ground_utterance: parsed 'yes' to yes
parse_and_ground_utterance: resulting groundings with normalized confidences: 
	yes 1.0
perform_action: {'action': 'walk', 'recipient': None, 'patient': None, 'goal': '3418', 'source': None}
main: ... done; got action {'action': 'walk', 'recipient': None, 'patient': None, 'goal': '3418', 'source': None}
main: writing new information from dialog(s) to file...
main: ... done; wrote data d = [[{'action': 'walk', 'recipient': None, 'patient': None, 'goal': '3418', 'source': None}], [{'all': ['travel to office next conference room'], 'patient': [], 'goal': ['office next to conference room', 'the office marked with the red x', 'to the office next to the conference room'], 'source': [], 'action': [], 'recipient': []}], [('pringles', 2, 1), ('metallic', 10, 0), ('metallic', 3, 0), ('metallic', 27, 0), ('metallic', 7, 0), ('metallic', 18, 0), ('metallic', 2, 0), ('metallic', 20, 0), ('metallic', 17, 0), ('blue', 18, 1), ('long', 20, 1), ('styrofoam', 20, 1)], [('red', 'white', False), ('red', 'yellow', False), ('red', 'blue', False)]]
main: running command dialog...
say_to_user_with_referents: What should I do? {}
get_from_user requested feedback
get_from_user (raw): 'take the pringles can to Dr. Heidi Hughes'
get_from_user (processed): 'take the pringles can to dr heidi hughes'
parse_and_ground_utterance: could not generate a parse for the utterance
say_to_user_with_referents: You want me to deliver something for someone? {'action': 'bring'}
get_from_user requested feedback
get_from_user (raw): 'yes'
get_from_user (processed): 'yes'
parse_and_ground_utterance: parsed 'yes' to yes
parse_and_ground_utterance: resulting groundings with normalized confidences: 
	yes 1.0
say_to_user_with_referents: What should I find to deliver? {'action': 'bring'}
get_from_user requested feedback
get_from_user (raw): 'can of pringles'
get_from_user (processed): 'can of pringles'
parse_and_ground_utterance: parsed 'can of pringles' to and(can,pringles)
parse_and_ground_utterance: resulting groundings with normalized confidences: 
	
say_to_user_with_referents: You want me to deliver something to <r>this person</r>? {'action': 'bring', 'recipient': 's'}
get_from_user requested feedback
get_from_user (raw): 'no'
get_from_user (processed): 'no'
parse_and_ground_utterance: parsed 'no' to no
parse_and_ground_utterance: resulting groundings with normalized confidences: 
	no 1.0
say_to_user_with_referents: What should I find to deliver? {'action': 'bring'}
get_from_user requested feedback
get_from_user (raw): 'can of pringles'
get_from_user (processed): 'can of pringles'
parse_and_ground_utterance: parsed 'can of pringles' to and(can,pringles)
parse_and_ground_utterance: resulting groundings with normalized confidences: 
	
say_to_user_with_referents: You want me to deliver <p>this</p> to someone? {'action': 'bring', 'patient': 'oidx_11'}
get_from_user requested feedback
get_from_user (raw): 'no'
get_from_user (processed): 'no'
parse_and_ground_utterance: parsed 'no' to no
parse_and_ground_utterance: resulting groundings with normalized confidences: 
	no 1.0
say_to_user_with_referents: Who should receive what I deliver? {'action': 'bring'}
get_from_user requested feedback
get_from_user (raw): 'the office marked h'
get_from_user (processed): 'the office marked h'
say_to_user: I haven't heard the word 'h' before. Does it refer to properties of things, like a color, shape, or weight?
get_from_user requested feedback
get_from_user (raw): 'no'
get_from_user (processed): 'no'
parse_and_ground_utterance: parsed 'no' to no
parse_and_ground_utterance: resulting groundings with normalized confidences: 
	no 1.0
parse_and_ground_utterance: could not generate a parse for the utterance
say_to_user_with_referents: You want me to deliver something to <r>this person</r>? {'action': 'bring', 'recipient': 'd'}
get_from_user requested feedback
get_from_user (raw): 'n'
get_from_user (processed): 'n'
parse_and_ground_utterance: parsed 'n' to south
parse_and_ground_utterance: resulting groundings with normalized confidences: 
	south 1.0
say_to_user: I am expecting a simple 'yes' or 'no' response.
say_to_user_with_referents: You want me to deliver something to <r>this person</r>? {'action': 'bring', 'recipient': 'd'}
get_from_user requested feedback
get_from_user (raw): 'no'
get_from_user (processed): 'no'
parse_and_ground_utterance: parsed 'no' to no
parse_and_ground_utterance: resulting groundings with normalized confidences: 
	no 1.0
say_to_user_with_referents: What should I find to deliver? {'action': 'bring'}
get_from_user requested feedback
get_from_user (raw): 'can of pringles'
get_from_user (processed): 'can of pringles'
parse_and_ground_utterance: parsed 'can of pringles' to and(can,pringles)
parse_and_ground_utterance: resulting groundings with normalized confidences: 
	
say_to_user_with_referents: You want me to deliver <p>this</p> to <r>this person</r>? {'action': 'bring', 'recipient': 'b', 'patient': 'oidx_12'}
get_from_user requested feedback
get_from_user (raw): 'no'
get_from_user (processed): 'no'
parse_and_ground_utterance: parsed 'no' to no
parse_and_ground_utterance: resulting groundings with normalized confidences: 
	no 1.0
say_to_user_with_referents: What should I find to deliver? {'action': 'bring'}
get_from_user requested feedback
get_from_user (raw): 'can of pringles'
get_from_user (processed): 'can of pringles'
parse_and_ground_utterance: parsed 'can of pringles' to and(can,pringles)
parse_and_ground_utterance: resulting groundings with normalized confidences: 
	
say_to_user_with_referents: You want me to deliver something to <r>this person