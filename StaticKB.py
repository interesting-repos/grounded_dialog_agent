#!/usr/bin/env python
__author__ = 'jesse'


# Load and store static facts from file. These facts can be created by hand or generated by another
# script from, for example, the BWI ASP using the StaticFactQuery service.
# For use with grounding, static fact predicates and atoms should match those in the corresponding ontology
# being used to create parses for grounding. E.g. if the ontology calls possession 'possesses(x, y)' then
# so should the facts read in from file.
class StaticKB:

    # Initialize given a facts filename.
    def __init__(self, facts_fn):
        self.facts = extract_facts_from_file(facts_fn)


# Read in facts from file.
# Fact format is 'predicate(arg1, arg2, ...)'
# Facts not present in the facts file are considered false (closed-world assumption)
def extract_facts_from_file(fn):
    facts = []  # list of pred, arg1, arg2, ..., argN for arbitrary N

    with open(fn, 'r') as f:
        for line in f.readlines():

            l = line.strip()
            if len(l) == 0:
                continue
            if l.count('(') != 1 or l.count(')') != 1:
                print "WARNING: unreadable fact '" + str(l) + "' parens errors"
                continue

            p = l.split('(')
            pred = p[0]
            args = [a.strip() for a in p[1].strip(')').split(',')]

            facts.append([pred] + args)

    return facts
